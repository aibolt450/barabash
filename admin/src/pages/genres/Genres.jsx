import { useState, useEffect } from "react";
import { genreAPI } from "../../api/genreAPI";
import "./Genres.css";

export default function Genres() {
  const [genres, setGenres] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [searchTerm, setSearchTerm] = useState("");
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingGenre, setEditingGenre] = useState(null);
  const [newGenre, setNewGenre] = useState({
    name: "",
    description: ""
  });

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∂–∞–Ω—Ä—ñ–≤
  const fetchGenres = async (page = 1) => {
    try {
      setLoading(true);
      const data = await genreAPI.getAll(page, 10);
      
      if (data.success) {
        setGenres(data.genres);
        setTotalPages(data.pagination.pages);
        setCurrentPage(page);
      } else {
        setError(data.message || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∂–∞–Ω—Ä—ñ–≤");
      }
    } catch (err) {
      setError(err.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º");
    } finally {
      setLoading(false);
    }
  };

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∂–∞–Ω—Ä—É
  const handleCreateGenre = async (e) => {
    e.preventDefault();
    try {
      const data = await genreAPI.create(newGenre);
      
      if (data.success) {
        setShowCreateModal(false);
        setNewGenre({
          name: "",
          description: ""
        });
        fetchGenres(currentPage);
        alert("–ñ–∞–Ω—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!");
      } else {
        alert(data.message || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂–∞–Ω—Ä—É");
      }
    } catch (err) {
      alert(err.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º");
    }
  };

  // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—É
  const handleEditGenre = async (e) => {
    e.preventDefault();
    try {
      const data = await genreAPI.update(editingGenre._id, editingGenre);
      
      if (data.success) {
        setShowEditModal(false);
        setEditingGenre(null);
        fetchGenres(currentPage);
        alert("–ñ–∞–Ω—Ä —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π!");
      } else {
        alert(data.message || "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É");
      }
    } catch (err) {
      alert(err.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º");
    }
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É
  const deleteGenre = async (genreId) => {
    if (!window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∂–∞–Ω—Ä?")) {
      return;
    }
    
    try {
      const data = await genreAPI.delete(genreId);
      
      if (data.success) {
        fetchGenres(currentPage);
        alert("–ñ–∞–Ω—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π!");
      } else {
        alert(data.message || "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∂–∞–Ω—Ä—É");
      }
    } catch (err) {
      alert(err.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º");
    }
  };

  // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  const openEditModal = (genre) => {
    setEditingGenre({ ...genre });
    setShowEditModal(true);
  };

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∂–∞–Ω—Ä—ñ–≤ –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º —Ç–µ—Ä–º—ñ–Ω–æ–º
  const filteredGenres = genres.filter(genre => 
    genre.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (genre.description && genre.description.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const formatDate = (dateString) => {
    if (!dateString) return "–ù–µ –≤–∫–∞–∑–∞–Ω–æ";
    return new Date(dateString).toLocaleString('uk-UA');
  };

  useEffect(() => {
    fetchGenres();
  }, []);

  // –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –∂–∞–Ω—Ä—É
  const toggleGenreStatus = async (genreId) => {
    try {
      const data = await genreAPI.toggleStatus(genreId);
      
      if (data.success) {
        fetchGenres(currentPage);
        alert(data.message || "–°—Ç–∞—Ç—É—Å –∂–∞–Ω—Ä—É —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∏–π!");
      } else {
        alert(data.message || "–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∂–∞–Ω—Ä—É");
      }
    } catch (err) {
      alert(err.response?.data?.message || "–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º");
    }
  };

  return (
    <div className="genres-page">
      <div className="genres-header">
        <div className="header-content">
          <div className="logo-section">
            <div className="logo-icon">
              <svg width="32" height="32" viewBox="0 0 24 24" fill="none">
                <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M2 17L12 22L22 17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                <path d="M2 12L12 17L22 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </div>
            <h1>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∞–Ω—Ä–∞–º–∏</h1>
          </div>
          
          <div className="header-actions">
            <button 
              onClick={() => window.location.href = '/dashboard'}
              className="back-btn"
            >
              ‚Üê –ù–∞–∑–∞–¥ –¥–æ Dashboard
            </button>
          </div>
        </div>
      </div>

      <div className="genres-content">
        <div className="genres-controls">
          <div className="search-section">
            <input
              type="text"
              placeholder="–ü–æ—à—É–∫ –∂–∞–Ω—Ä—ñ–≤..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
          </div>
          
          <button 
            onClick={() => setShowCreateModal(true)}
            className="create-genre-btn"
          >
            + –°—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞–Ω—Ä
          </button>
        </div>

        {loading ? (
          <div className="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
        ) : error ? (
          <div className="error">{error}</div>
        ) : (
          <>
            <div className="genres-table">
              <table>
                <thead>
                  <tr>
                    <th>–ù–∞–∑–≤–∞</th>
                    <th>–û–ø–∏—Å</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
                    <th>–î—ñ—ó</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredGenres.map((genre) => (
                    <tr key={genre._id}>
                      <td>
                        <div className="genre-name">{genre.name}</div>
                      </td>
                      <td>
                        <div className="genre-description">
                          {genre.description || "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}
                        </div>
                      </td>
                      <td>
                        <span className={`status-badge ${genre.isActive ? 'active' : 'inactive'}`}>
                          {genre.isActive ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
                        </span>
                      </td>
                      <td>{formatDate(genre.createdAt)}</td>
                      <td>
                        <div className="action-buttons">
                          <button
                            onClick={() => toggleGenreStatus(genre._id)}
                            className={`action-btn toggle ${genre.isActive ? 'deactivate' : 'activate'}`}
                            title={genre.isActive ? '–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∂–∞–Ω—Ä' : '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∂–∞–Ω—Ä'}
                          >
                            {genre.isActive ? 'üî¥' : 'üü¢'}
                          </button>
                          
                          <button
                            onClick={() => openEditModal(genre)}
                            className="action-btn edit"
                            title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂–∞–Ω—Ä"
                          >
                            ‚úèÔ∏è
                          </button>
                          
                          <button
                            onClick={() => deleteGenre(genre._id)}
                            className="action-btn delete"
                            title="–í–∏–¥–∞–ª–∏—Ç–∏ –∂–∞–Ω—Ä"
                          >
                            üóëÔ∏è
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è */}
            <div className="pagination">
              <button 
                onClick={() => fetchGenres(currentPage - 1)}
                disabled={currentPage === 1}
                className="pagination-btn"
              >
                ‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—è
              </button>
              
              <span className="pagination-info">
                –°—Ç–æ—Ä—ñ–Ω–∫–∞ {currentPage} –∑ {totalPages}
              </span>
              
              <button 
                onClick={() => fetchGenres(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="pagination-btn"
              >
                –ù–∞—Å—Ç—É–ø–Ω–∞ ‚Üí
              </button>
            </div>
          </>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂–∞–Ω—Ä—É */}
      {showCreateModal && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h2>–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∂–∞–Ω—Ä</h2>
              <button 
                onClick={() => setShowCreateModal(false)}
                className="close-btn"
              >
                √ó
              </button>
            </div>
            
            <form onSubmit={handleCreateGenre} className="modal-form">
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞ –∂–∞–Ω—Ä—É *</label>
                <input
                  type="text"
                  value={newGenre.name}
                  onChange={(e) => setNewGenre({...newGenre, name: e.target.value})}
                  required
                />
              </div>
              
              <div className="form-group">
                <label>–û–ø–∏—Å</label>
                <textarea
                  value={newGenre.description}
                  onChange={(e) => setNewGenre({...newGenre, description: e.target.value})}
                  rows="3"
                  placeholder="–û–ø–∏—Å –∂–∞–Ω—Ä—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
                />
              </div>
              
              <div className="modal-actions">
                <button type="button" onClick={() => setShowCreateModal(false)} className="cancel-btn">
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
                <button type="submit" className="submit-btn">
                  –°—Ç–≤–æ—Ä–∏—Ç–∏ –∂–∞–Ω—Ä
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∂–∞–Ω—Ä—É */}
      {showEditModal && editingGenre && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h2>–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂–∞–Ω—Ä</h2>
              <button 
                onClick={() => setShowEditModal(false)}
                className="close-btn"
              >
                √ó
              </button>
            </div>
            
            <form onSubmit={handleEditGenre} className="modal-form">
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞ –∂–∞–Ω—Ä—É *</label>
                <input
                  type="text"
                  value={editingGenre.name}
                  onChange={(e) => setEditingGenre({...editingGenre, name: e.target.value})}
                  required
                />
              </div>
              
              <div className="form-group">
                <label>–û–ø–∏—Å</label>
                <textarea
                  value={editingGenre.description || ""}
                  onChange={(e) => setEditingGenre({...editingGenre, description: e.target.value})}
                  rows="3"
                  placeholder="–û–ø–∏—Å –∂–∞–Ω—Ä—É (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
                />
              </div>
              
              <div className="modal-actions">
                <button type="button" onClick={() => setShowEditModal(false)} className="cancel-btn">
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
                <button type="submit" className="submit-btn">
                  –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}