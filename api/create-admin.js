const mongoose = require('mongoose');
const CryptoJS = require('crypto-js');
const User = require('./models/User');
require('dotenv').config();

async function createAdminUser() {
  try {
    // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await mongoose.connect(process.env.MONGOURL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB');

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
    const existingAdmin = await User.findOne({ 
      $or: [
        { email: 'admin@bestflix.com' },
        { username: 'admin' }
      ]
    });

    if (existingAdmin) {
      console.log('–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —ñ—Å–Ω—É—î:', existingAdmin.email);
      process.exit(0);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const adminUser = await User.create({
      username: 'admin',
      email: 'admin@bestflix.com',
      password: CryptoJS.AES.encrypt(
        'admin123',
        process.env.SECRET_KEY_FOR_CRYPTOJS
      ).toString(),
      firstName: 'Admin',
      lastName: 'User',
      isAdmin: true,
      isActive: true,
      isEmailVerified: true
    });

    console.log('‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ!');
    console.log('üìß Email: admin@bestflix.com');
    console.log('üîë –ü–∞—Ä–æ–ª—å: admin123');
    console.log('üë§ Username: admin');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('–í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ MongoDB');
    process.exit(0);
  }
}

createAdminUser();